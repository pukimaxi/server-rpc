"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var mocha_1 = require("mocha");
var chai_1 = require("chai");
var _1 = require(".");
var models_1 = require("./models");
mocha_1.describe("JSONRPCServer", function () {
    var server;
    var response;
    mocha_1.beforeEach(function () {
        response = null;
        server = new _1.JSONRPCServer();
    });
    var waitUntil = function (predicate) {
        return Promise.resolve().then(function () {
            if (!predicate()) {
                return waitUntil(predicate);
            }
        });
    };
    mocha_1.describe("having an echo method", function () {
        ["legacy", "new"].forEach(function (apiModel) {
            mocha_1.describe("using " + apiModel + " API", function () {
                mocha_1.beforeEach(function () {
                    var legacyMethod = function (params) { return function (serverParams) {
                        return newMethod(params, serverParams);
                    }; };
                    var newMethod = function (_a, serverParams) {
                        var text = _a.text;
                        if (serverParams) {
                            return serverParams.userID + " said " + text;
                        }
                        else {
                            return text;
                        }
                    };
                    server.addMethod("echo", apiModel === "legacy" ? legacyMethod : newMethod);
                });
                mocha_1.describe("receiving a request to the method", function () {
                    mocha_1.beforeEach(function () {
                        return server
                            .receive({
                            jsonrpc: _1.JSONRPC,
                            id: 0,
                            method: "echo",
                            params: { text: "foo" },
                        })
                            .then(function (givenResponse) { return (response = givenResponse); });
                    });
                    mocha_1.it("should echo the text", function () {
                        chai_1.expect(response).to.deep.equal({
                            jsonrpc: _1.JSONRPC,
                            id: 0,
                            result: "foo",
                        });
                    });
                });
                mocha_1.describe("receiving a request to the method with user ID", function () {
                    mocha_1.beforeEach(function () {
                        return server
                            .receive({
                            jsonrpc: _1.JSONRPC,
                            id: 0,
                            method: "echo",
                            params: { text: "foo" },
                        }, { userID: "bar" })
                            .then(function (givenResponse) { return (response = givenResponse); });
                    });
                    mocha_1.it("should echo the text with the user ID", function () {
                        chai_1.expect(response).to.deep.equal({
                            jsonrpc: _1.JSONRPC,
                            id: 0,
                            result: "bar said foo",
                        });
                    });
                });
            });
        });
    });
    mocha_1.describe("responding undefined", function () {
        mocha_1.beforeEach(function () {
            server.addMethod("ack", function () { return undefined; });
            return server
                .receive({ jsonrpc: _1.JSONRPC, id: 0, method: "ack" })
                .then(function (givenResponse) { return (response = givenResponse); });
        });
        mocha_1.it("should response with null result", function () {
            chai_1.expect(response).to.deep.equal({
                jsonrpc: _1.JSONRPC,
                id: 0,
                result: null,
            });
        });
    });
    mocha_1.describe("throwing", function () {
        mocha_1.beforeEach(function () {
            server.addMethod("throw", function () {
                throw new Error("Test throwing");
            });
            return server
                .receive({ jsonrpc: _1.JSONRPC, id: 0, method: "throw" })
                .then(function (givenResponse) { return (response = givenResponse); });
        });
        mocha_1.it("should respond error", function () {
            chai_1.expect(response).to.deep.equal({
                jsonrpc: _1.JSONRPC,
                id: 0,
                error: {
                    code: 0,
                    message: "Test throwing",
                },
            });
        });
    });
    mocha_1.describe("rejecting", function () {
        mocha_1.beforeEach(function () {
            server.addMethodAdvanced("reject", function () {
                return Promise.reject(new Error("Test rejecting"));
            });
            return server
                .receive({ jsonrpc: _1.JSONRPC, id: 0, method: "reject" })
                .then(function (givenResponse) { return (response = givenResponse); });
        });
        mocha_1.it("should respond error", function () {
            chai_1.expect(response).to.deep.equal({
                jsonrpc: _1.JSONRPC,
                id: 0,
                error: {
                    code: 0,
                    message: "Test rejecting",
                },
            });
        });
    });
    mocha_1.describe("responding to a notification", function () {
        mocha_1.beforeEach(function () {
            server.addMethod("foo", function () { return "foo"; });
            return server
                .receive({ jsonrpc: _1.JSONRPC, method: "foo" })
                .then(function (givenResponse) { return (response = givenResponse); });
        });
        mocha_1.it("should not respond", function () {
            chai_1.expect(response).to.be.null;
        });
    });
    mocha_1.describe("error on a notification", function () {
        mocha_1.beforeEach(function () {
            server.addMethod("foo", function () { return Promise.reject(new Error("foo")); });
            return server
                .receive({ jsonrpc: _1.JSONRPC, method: "foo" })
                .then(function (givenResponse) { return (response = givenResponse); });
        });
        mocha_1.it("should not respond", function () {
            chai_1.expect(response).to.be.null;
        });
    });
    mocha_1.describe("responding null to a request", function () {
        mocha_1.beforeEach(function () {
            server.addMethodAdvanced("foo", function () { return Promise.resolve(null); });
            return server
                .receive({
                jsonrpc: _1.JSONRPC,
                id: 0,
                method: "foo",
            })
                .then(function (givenResponse) { return (response = givenResponse); });
        });
        mocha_1.it("should respond error", function () {
            chai_1.expect(response).to.deep.equal({
                jsonrpc: _1.JSONRPC,
                id: 0,
                error: {
                    code: models_1.JSONRPCErrorCode.InternalError,
                    message: "Internal error",
                },
            });
        });
    });
    mocha_1.describe("receiving a request to an unknown method", function () {
        mocha_1.beforeEach(function () {
            return server
                .receive({
                jsonrpc: _1.JSONRPC,
                id: 0,
                method: "foo",
            })
                .then(function (givenResponse) { return (response = givenResponse); });
        });
        mocha_1.it("should respond error", function () {
            chai_1.expect(response).to.deep.equal({
                jsonrpc: _1.JSONRPC,
                id: 0,
                error: {
                    code: models_1.JSONRPCErrorCode.MethodNotFound,
                    message: "Method not found",
                },
            });
        });
    });
    mocha_1.describe("receiving an invalid request", function () {
        var promise;
        mocha_1.beforeEach(function () {
            promise = server.receive({});
        });
        mocha_1.it("should throw", function () {
            return promise.then(function () { return Promise.reject(new Error("Expected to fail")); }, function () { return undefined; });
        });
    });
});
